version: 2.1

commands:
  destroy-infra:
    description: Destroy  cloudformation stacks given a workflow ID.
    parameters:
      when:
        type: string   
    steps:
      - run:
          name: Destroy backend
          when: << parameters.when >>
          command: |
            aws cloudformation delete-stack --stack-name capstone-green-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  build-lint:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore_cache:
          keys: [capstone]
      - run:
          name: install and linting
          command: |
            pwd
            ls -l
            python3 -m venv venv
            . venv/bin/activate
            make all
      - save_cache:
          paths:
            - ./venv
          key: capstone

  create-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: creating infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/Instance_in_public.yml \
              --stack-name "capstone-green-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=capstone-green-${CIRCLE_WORKFLOW_ID:0:7}
          #   exit 1 

      - run:
          name: Add server ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=capstone-green-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}'>> ~/project/.circleci/ansible/inventory.txt
        
            cat ~/project/.circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - save_cache:
          paths:
            - ./venv
          key: capstone

      - destroy-infra:
          when: on_fail

  configure-new-server:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["fd:93:54:44:8f:2e:1d:16:c5:a3:85:0d:ff:3c:6f:e1"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-infra:
          when: on_fail

  deploy-app:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["fd:93:54:44:8f:2e:1d:16:c5:a3:85:0d:ff:3c:6f:e1"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install aws & ansible
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Deploy app
          command: |
            cd .circleci/ansible
            pwd
            ls -l
            ansible-playbook -i inventory.txt deploy-app.yml
      - destroy-infra:
          when: on_fail
      
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Get app url
          command: |
            export SERVER_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=capstone-green-${CIRCLE_WORKFLOW_ID:0:7}" | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}')
            export APP_URL="http://${SERVER_IP}:8000"
            echo APP_URL=${APP_URL}
      - run:
          name: smoke test.
          command: |
            export SERVER_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=capstone-green-${CIRCLE_WORKFLOW_ID:0:7}" | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}')
            export APP_URL="http://${SERVER_IP}:8000"
            if curl "${APP_URL}" | grep -i "Remon"
            then
                return 0
            else
                return 1
            fi
      - destroy-infra:
          when: on_fail

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id and Remove old stacks infrastructure
          command: |
            export OldWorkflowID=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate  \
              | grep -v "${CIRCLE_WORKFLOW_ID:0:7}" | grep [0-9] | sed 's/"//g' | awk -F- '{print $3}')

            echo OldWorkflowID: "${OldWorkflowID}"
            echo current_CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"    

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 

            echo Stack names: "${STACKS[@]}"

            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              aws cloudformation delete-stack --stack-name capstone-green-${OldWorkflowID}
              echo "................deleted old stack................."
            fi
     # - destroy-infra:
      #    when: on_fail

workflows:
  default:
    jobs:
      - build-lint
      - create-infrastructure:
          requires: [build-lint]
      - configure-new-server:
          requires: [create-infrastructure]
      - deploy-app:
          requires: [configure-new-server]
      - smoke-test:
          requires: [deploy-app]
      - cleanup:
          requires: [smoke-test] 
